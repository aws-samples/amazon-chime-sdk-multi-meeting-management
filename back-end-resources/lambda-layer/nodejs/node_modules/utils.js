var AWS = require('aws-sdk');
var ddb = new AWS.DynamoDB();
const chime = new AWS.Chime({ region: 'us-east-1' });
chime.endpoint = new AWS.Endpoint('https://service.chime.aws.amazon.com/console');

const oneDayFromNow = Math.floor(Date.now() / 1000) + 60 * 60 * 24;
const meetingsTableName = process.env.MEETINGS_TABLE_NAME;
const attendeesTableName = process.env.ATTENDEES_TABLE_NAME;
const scheduleTableName = process.env.SCHEDULING_TABLE_NAME

// Create a unique id
exports.uuid = () => {
  console.log("in uuid")
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    var r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}
  
  // Retrieve meeting from list of active meetings
exports.getMeetings = async () => {
  console.log("in getMeeting") 
  const params = {};
  const result = await chime.listMeetings(params, function(err, data) {
    if (err) {
      console.log(err, err.stack);
      return null;
    }
  }).promise();
  return result;

}
  
  // Add meeting in the meeting table
exports.putMeeting = async (title, meetingInfo) => {
  console.log("in putMeeting")
  await ddb.putItem({
    TableName: meetingsTableName,
    Item: {
      'Title': { S: title },
      'Data': { S: JSON.stringify(meetingInfo) },
      'TTL': {
        N: '' + oneDayFromNow
      }
    }
  }).promise();
}
  
  // Retrieve attendee from the attendee table
exports.getAttendee = async (title, attendeeId) => {
  const result = await ddb.getItem({
    TableName: attendeesTableName,
    Key: {
      'AttendeeId': {
        S: `${title}/${attendeeId}`
      }
    }
  }).promise();
  if (!result.Item) {
    return 'Unknown';
  }
  return result.Item.Name.S;
}
  
  // Add attendee in the attendee table
exports.putAttendee = async (title, attendeeId, name) => {
  console.log("in putAttendee")
  await ddb.putItem({
    TableName: attendeesTableName,
    Item: {
      'AttendeeId': {
        S: `${title}/${attendeeId}`
      },
      'Name': { S: name },
      'TTL': {
        N: '' + oneDayFromNow
      }
    }
  }).promise();
}

//Schedule meetings in the scheduledMeetings table
exports.scheduleMeeting = async (title, startTime, duration, topic, region) => {
  console.log("in ScheduleMeeting");
  console.log("Scheduling: ", title, topic, startTime, region, duration);
  const endTime = parseInt(startTime) + (duration * 60);
  const id = exports.uuid();
  await ddb.putItem({ 
    TableName: scheduleTableName,
    Item: {
      'uuid': { 'S': id },
      'meetingName' : { 'S': title },
      'startTime' : { 'N': '' + startTime },
      'duration' : { 'N': '' + duration },
      'topic' : { 'S': topic },
      'region' : { 'S': region },
      'TTL' : {
        N: '' + endTime
      } 
      }
  }).promise();
}

//List scheduled meetings
exports.listScheduledMeetings = async () => {
  console.log("in listScheduledMeetings");
  let timestamp = Math.round(Date.now() / 1000);

  const result = await ddb.scan({
      TableName: scheduleTableName,
      ExpressionAttributeValues: {
        ":now": {
          N: ''+ timestamp
        }
      },
      ExpressionAttributeNames: {
        "#end": "TTL"
      },
      FilterExpression: "#end > :now"
    }).promise();

  for (let meeting of result.Items) {
    meeting.uuid = meeting.uuid["S"];
    meeting.meetingName = meeting.meetingName["S"];
    meeting.startTime = meeting.startTime["N"];
    meeting.duration = meeting.duration["N"];
    meeting.topic = meeting.topic["S"];
    meeting.region = meeting.region["S"];
    meeting.TTL = meeting.TTL["N"];
  }
  return(result.Items);
}

//Deletes given meeting
exports.deleteMeeting = async(uuid) => {
  console.log("in deleteMeeting");
  await ddb.deleteItem({
    TableName: scheduleTableName,
    Key: {
      uuid: { "S" : uuid }
    }
  }, function (err, data) {
    if (err) console.log(err, err.stack); // an error occurred
    else     console.log(data);
  });
}
